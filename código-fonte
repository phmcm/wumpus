#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define MAX_PLAYERS 100
#define MAX_NOME 50
#define Tamanho_tabuleiro 8

int tabuleiroo[Tamanho_tabuleiro][Tamanho_tabuleiro];
int encontrou_ouro;
int flecha;
int mov = 0;

void iniciar_tabuleiro()
{
    srand(time(NULL));

    // inicializar tabuleiro com todos os elementos iguais a zero
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            tabuleiroo[i][j] = 0;
        }
    }

    // posicionar o agente na posi√ß√£o (A,1)
    tabuleiroo[0][0] = 1;

    // posicionar o ouro em uma posi√ß√£o aleat√≥ria
    int ouro_linha = rand() % Tamanho_tabuleiro;
    int ouro_coluna = rand() % Tamanho_tabuleiro;
    while (tabuleiroo[ouro_linha][ouro_coluna] != 0)
    {
        ouro_linha = rand() % Tamanho_tabuleiro;
        ouro_coluna = rand() % Tamanho_tabuleiro;
    }
    tabuleiroo[ouro_linha][ouro_coluna] = 2;

    // posicionar os po√ßos em posi√ß√µes aleat√≥rias
    int count_pocos = 0;
    while (count_pocos < 5) // garantir que sejam posicionados exatamente 5 po√ßos
    {
        int poco_linha = rand() % Tamanho_tabuleiro;
        int poco_coluna = rand() % Tamanho_tabuleiro;
        if (tabuleiroo[poco_linha][poco_coluna] == 0) // apenas posicionar o po√ßo se a posi√ß√£o estiver vazia
        {
            tabuleiroo[poco_linha][poco_coluna] = 5;
            count_pocos++;
        }
    }

    // posicionar o monstro em uma posi√ß√£o aleat√≥ria
    int monstro_linha = rand() % Tamanho_tabuleiro;
    int monstro_coluna = rand() % Tamanho_tabuleiro;
    while (tabuleiroo[monstro_linha][monstro_coluna] != 0)
    {
        monstro_linha = rand() % Tamanho_tabuleiro;
        monstro_coluna = rand() % Tamanho_tabuleiro;
    }
    tabuleiroo[monstro_linha][monstro_coluna] = 3;

    // posicionar a flecha em uma posi√ß√£o aleat√≥ria
    int flecha_linha = rand() % Tamanho_tabuleiro;
    int flecha_coluna = rand() % Tamanho_tabuleiro;
    while (tabuleiroo[flecha_linha][flecha_coluna] != 0)
    {
        flecha_linha = rand() % Tamanho_tabuleiro;
        flecha_coluna = rand() % Tamanho_tabuleiro;
    }
    tabuleiroo[flecha_linha][flecha_coluna] = 4;
}

// TABULEIRO NORMAL(TA PRONTO JA)
void mostrar_tabuleiro()
{
    system("cls");
    printf("  ");
    for (int j = 0; j < Tamanho_tabuleiro; j++)
    {
        printf("%c ", 'A' + j);
    }
    printf("\n");
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        printf("%d ", i + 1);
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 1)
            {
                printf("A ");
            }
            else
            {
                printf("# ");
            }
        }
        printf("\n");
    }
}

// TABULEIRO COM DEBUG(TA PRONTO)
void mostrar_tabuleiroDEBUG()
{
    system("cls");
    printf("  ");
    for (int j = 0; j < Tamanho_tabuleiro; j++)
    {
        printf("%c ", 'A' + j);
    }
    printf("\n");
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        printf("%d ", 1 + i);
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 1)
            {
                printf("A ");
            }
            else if (tabuleiroo[i][j] == 2)
            {
                printf("O ");
            }
            else if (tabuleiroo[i][j] == 3)
            {
                printf("M ");
            }
            else if (tabuleiroo[i][j] == 4)
            {
                printf("F ");
            }
            else if (tabuleiroo[i][j] == 5)
            {
                printf("P ");
            }
            else
            {
                printf("# ");
            }
        }
        printf("\n");
    }
}

void mover_agente()
{
    int agente_linha = 0;
    int agente_coluna = 0;
    int nova_linha = 0;
    int nova_coluna = 0;

    // encontrar a posi√ß√£o atual do agente
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 1)
            {
                agente_linha = i;
                agente_coluna = j;
            }
        }
    }

    // solicitar a posi√ß√£o destino ao usu√°rio
    char posicao_destino[3];
    printf("\n\nDigite a posicao destino (exemplo: A2): ");
    scanf("%s", posicao_destino);

    // converter a string em coordenadas na matriz
    nova_coluna = posicao_destino[0] - 'A';
    nova_linha = posicao_destino[1] - '0' - 1;

    // validar a posi√ß√£o destino
    if (nova_linha < 0 || nova_linha >= Tamanho_tabuleiro || nova_coluna < 0 || nova_coluna >= Tamanho_tabuleiro)
    {
        printf("Posicao invalida!\n");
        return;
    }

    if (tabuleiroo[nova_linha][nova_coluna] == 5)
    {
        printf("\n\nVoc√™ caiu no po√ßo! Eu falei para voc√™ tomar cuidado üò†\n\n");
        inicioMenu();
    }
    else if (tabuleiroo[nova_linha][nova_coluna] == 3)
    {
        printf("\nO monstro te pegou ):\n\n");
        inicioMenu();
    }
    if (tabuleiroo[nova_linha][nova_coluna] == 2)
    {
        printf("\n\nVoc√™ achou o ouro.\n\n");
        encontrou_ouro = 1;
    }
    if (tabuleiroo[nova_linha][nova_coluna] == 4)
    {
        printf("\n\nVoc√™ achou uma flecha!\n\n");
        flecha = 1;
    }

    // verificar se a posi√ß√£o destino √© adjacente √† posi√ß√£o atual do agente
    if ((nova_linha == agente_linha && (nova_coluna == agente_coluna + 1 || nova_coluna == agente_coluna - 1)) ||
        (nova_coluna == agente_coluna && (nova_linha == agente_linha + 1 || nova_linha == agente_linha - 1)))
    {
        // atualizar a posi√ß√£o do agente
        tabuleiroo[agente_linha][agente_coluna] = 0;
        tabuleiroo[nova_linha][nova_coluna] = 1;
        printf("Agente movido para a posicao %s\n", posicao_destino);
        mov++;
    }
    else
    {
        printf("Posicao invalida! O agente so pode se mover para posicoes adjacentes.\n");
    }
}
void inicioMenu()
{
    int choice = 0;
    int x, mov = 0;
    char tiro;
    int nova_linha, nova_coluna, agente_linha, agente_coluna;
    while (choice != 1 && choice != 2)
    {
        printf("Escolha uma opcao:\n");
        printf("1. Jogar novamente\n");
        printf("2. Sair do jogo\n");
        printf("Opcao: ");
        scanf("%d", &choice);
        if (choice != 1 && choice != 2)
        {
            printf("Opcao invalida. Tente novamente.\n");
        }
    }

    if (choice == 1)
    {
        printf("\n");
        iniciar_tabuleiro();
        mostrar_tabuleiro();

        while (1)
        {
            mover_agente();
            mover_monstro(&nova_linha, &nova_coluna);
            mostrar_tabuleiro();
            mensagem(&agente_linha, &agente_coluna);
            mensagem_campeao(mov);
            if (encontrou_ouro == 1)
            {
                printf("\nVoc√™ est√° com o ouro. FUJA!\n\n");
            }

            if (flecha == 1)
            {
                printf("\nVoc√™ tem uma Flecha. Use com responsabilidade! (S/N)");
                scanf(" %c", &tiro);
                if (tiro == 'S' || tiro == 's')
                {
                    atirar_flecha();
                    flecha = 0;
                    printf("\nFlecha usada!");
                }
            }
        }
    }
    else
    {
        exit(0);
    }
}

void mover_monstro(int *nova_linha, int *nova_coluna)
{
    // encontrar a posi√ß√£o atual do monstro na matriz tabuleiroo
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 3)
            {
                *nova_linha = i;
                *nova_coluna = j;
            }
        }
    }

    // escolher uma dire√ß√£o aleat√≥ria para o movimento do monstro
    int direcao = rand() % 4; // 0=norte, 1=sul, 2=oeste, 3=leste
    int temp_linha = *nova_linha;
    int temp_coluna = *nova_coluna;
    switch (direcao)
    {
    case 0:
        *nova_linha -= 1;
        break;
    case 1:
        *nova_linha += 1;
        break;
    case 2:
        *nova_coluna -= 1;
        break;
    case 3:
        *nova_coluna += 1;
        break;
    }

    // verificar se a nova posi√ß√£o √© v√°lida (dentro do tabuleiro)
    if (*nova_linha < 0 || *nova_linha >= Tamanho_tabuleiro || *nova_coluna < 0 || *nova_coluna >= Tamanho_tabuleiro)
    {
        return;
    }

    if (tabuleiroo[*nova_linha][*nova_coluna] == 5)
    {
        return;
    }
    if (tabuleiroo[*nova_linha][*nova_coluna] == 2)
    {
        return;
    }
    if (tabuleiroo[*nova_linha][*nova_coluna] == 4)
    {
        return;
    }
    if (tabuleiroo[*nova_linha][*nova_coluna] == 1)
    {
        printf("O monstro te pegou \xF0\x9F\x98\xA2.");
        exit(0);
    }

    // atualizar a posi√ß√£o do monstro na matriz tabuleiroo
    tabuleiroo[temp_linha][temp_coluna] = 0;
    tabuleiroo[*nova_linha][*nova_coluna] = 3;

    printf("\nO monstro se movimentou!\n\n");
}

void atirar_flecha()
{
    if (flecha == 0)
    {
        printf("\nVoce nao tem mais flechas!\n");
        return;
    }

    char coluna;
    int linha;
    printf("Digite a posicao para onde quer atirar (ex: A1): ");
    scanf(" %c%d", &coluna, &linha);
    linha--; // ajuste para utilizar o √≠ndice do array

    // converter a letra da coluna para o √≠ndice correspondente do array
    int coluna_index = coluna - 'A';

    // verificar se a posi√ß√£o est√° adjacente ao agente
    int agente_linha, agente_coluna;
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 1)
            {
                agente_linha = i;
                agente_coluna = j;
                break;
            }
        }
    }
    if (linha < agente_linha - 1 || linha > agente_linha + 1 || coluna_index < agente_coluna - 1 || coluna_index > agente_coluna + 1)
    {
        printf("A flecha so pode ser atirada em uma posicao adjacente ao agente!\n");
        return;
    }

    // verificar se a posi√ß√£o tem o monstro
    if (tabuleiroo[linha][coluna_index] == 3)
    {
        printf("\nParabens! Voce matou o monstro!\n");
        tabuleiroo[linha][coluna_index] = 0; // remover o monstro do tabuleiro
        encontrou_ouro = 1;
    }
    else
    {
        printf("\nVoce errou o disparo! O monstro ainda esta vivo.\n");
    }
    flecha--;
}

// TESTESSSSSS
void mensagem_campeao(int movimentos)
{
    char nome[100];
    FILE *arquivo;
    // Encontrar a posi√ß√£o do agente no tabuleiro
    int agente_linha, agente_coluna;
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 1)
            {
                agente_linha = i;
                agente_coluna = j;
            }
        }
    }

    if (encontrou_ouro && agente_linha == 0 && agente_coluna == 0)
    {
        system("cls");
        printf("\n\nParab√©ns, voc√™ conseguiu escapar com o ouro. \n\nAgora voc√™ j√° pode se matricular na cadeira de AED1 üëç\n\n");

        // cria o arquivo para armazenar os resultados
        arquivo = fopen("resultados.txt", "a");

        if (arquivo == NULL)
        {
            printf("Erro ao abrir o arquivo.\n");
            return;
        }

        // pede o nome do jogador e salva no arquivo junto com o n√∫mero de movimentos
        printf("Parab√©ns, voc√™ completou o jogo em %d movimentos!\n", mov);
        printf("Digite seu nome para salvar seu resultado: ");
        scanf("%s", nome);
        fprintf(arquivo, "%s: %d movimentos\n", nome, mov);

        // fecha o arquivo
        fclose(arquivo);

        inicioMenu();
    }
}

typedef struct
{
    char name[50];
    int moves;
} Player;

int compare_players(const void *a, const void *b)
{
    Player *p1 = (Player *)a;
    Player *p2 = (Player *)b;
    return p1->moves - p2->moves;
}

void print_ranking(Player *players, int num_players)
{
    printf("Ranking:\n");
    for (int i = 0; i < num_players; i++)
    {
        printf("%s  %d\n", players[i].name, players[i].moves);
    }
}

void read_ranking_file(const char *filename)
{
    FILE *file = fopen(filename, "r");
    if (file == NULL)
    {
        printf("Erro ao abrir o arquivo %s\n", filename);
        return;
    }

    Player players[MAX_PLAYERS];
    int num_players = 0;

    char line[100];
    while (fgets(line, sizeof(line), file) != NULL)
    {
        char *name = strtok(line, ":");
        char *moves_str = strtok(NULL, "\n");
        int moves = atoi(moves_str);

        Player player;
        strcpy(player.name, name);
        player.moves = moves;
        players[num_players++] = player;
    }

    qsort(players, num_players, sizeof(Player), compare_players);
    print_ranking(players, num_players);

    fclose(file);
}

void mensagem(int *agente_linha, int *agente_coluna)
{
    // Encontrar a posi√ß√£o do agente no tabuleiro
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 1)
            {
                *agente_linha = i;
                *agente_coluna = j;
            }
        }
    }
    // Verificar a posi√ß√£o do agente em rela√ß√£o ao po√ßo
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 5)
            {
                int distancia_linha = abs(i - *agente_linha);
                int distancia_coluna = abs(j - *agente_coluna);
                if (distancia_linha + distancia_coluna == 1)
                {
                    printf("\nCuidado pra n√£o cair!\n");
                    return;
                }
            }
        }
    }
    // Verificar a posi√ß√£o do agente em rela√ß√£o ao monstro
    for (int i = 0; i < Tamanho_tabuleiro; i++)
    {
        for (int j = 0; j < Tamanho_tabuleiro; j++)
        {
            if (tabuleiroo[i][j] == 3)
            {
                int distancia_linha = abs(i - *agente_linha);
                int distancia_coluna = abs(j - *agente_coluna);
                if (distancia_linha + distancia_coluna == 1)
                {
                    printf("\nOlha o bixo pap√£o hein!\n");
                    return;
                }
            }
        }
    }
}
int main()
{
    system("chcp 65001 > NUL");
    int x, acao, mov = 0;
    char tiro;
    int nova_linha, nova_coluna, agente_linha, agente_coluna;
    printf("=============================\n");
    printf("------O Mundo de Wumpus------\n");
    printf("=============================\n\n");
    printf("MENU:\n1- |Jogar|\n2- |Ranking|\n3- |Debug|\n4- |Sair|\n\nSua escolha:");
    scanf("%d", &x);
    if (x < 1 || x > 4)
        do
        {
            printf("\nOpcao invalida, digite outro valor:");
            scanf("%d", &x);
        } while (x < 1 || x > 4);
    switch (x)
    {
    case 1: // op√ß√£o de Jogar

        printf("\n");
        iniciar_tabuleiro();
        mostrar_tabuleiro();

        while (1)
        {
            mover_agente();
            mover_monstro(&nova_linha, &nova_coluna);
            mostrar_tabuleiro();
            mensagem(&agente_linha, &agente_coluna);
            mensagem_campeao(mov);
            if (encontrou_ouro == 1)
            {
                printf("\nVoc√™ est√° com o ouro. FUJA!\n\n");
            }

            if (flecha == 1)
            {
                printf("\nVoc√™ tem uma Flecha. Use com responsabilidade! (S/N)");
                scanf(" %c", &tiro);
                if (tiro == 'S' || tiro == 's')
                {
                    atirar_flecha();
                    flecha = 0;
                    printf("\nFlecha usada!");
                }
            }
        }
        break;
    case 2: // op√ß√£o de Debug
        read_ranking_file("resultados.txt");
        break;
    case 3: // op√ß√£o Ranking
        printf("\n");
        iniciar_tabuleiro();
        mostrar_tabuleiroDEBUG();

        while (3)
        {
            mover_agente();
            mover_monstro(&nova_linha, &nova_coluna);
            mostrar_tabuleiroDEBUG();
            mensagem(&agente_linha, &agente_coluna);
            mensagem_campeao(mov);

            if (encontrou_ouro == 1)
            {
                printf("\nVoc√™ est√° com o ouro. FUJA!");
            }

            if (flecha == 1)
            {
                printf("\nVoc√™ tem uma Flecha. Use com responsabilidade! (S/N)");
                scanf(" %c", &tiro);
                if (tiro == 'S' || tiro == 's')
                {
                    atirar_flecha();
                    flecha = 0;
                    printf("\nFlecha usada!");
                }
            }
        }
        break;
    case 4:
        printf("\n");
        return 0;
        break;
    }

    return 0;
}
